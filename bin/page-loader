#!/usr/bin/env php
<?php

$autoloadPath = __DIR__ . '/../vendor/autoload.php';
if (file_exists($autoloadPath)) {
    require_once $autoloadPath;
} else {
    require_once __DIR__ . '/../../../autoload.php';
}

use Hexlet\Code\Command;
use Monolog\Level;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Hexlet\Code\Loader;
use GuzzleHttp\Client;
use Hexlet\Code\FilePathBuilder;

echo 'Step 1'.PHP_EOL;

$application = new Application();
$application = new Application('page-loader', '1.0.14');

echo 'Step 2'.PHP_EOL;
$log = new Logger('main');
$stackHandler = new StreamHandler(__DIR__.'/page-loader.log', Level::Debug);
$stackHandler->getFormatter()->ignoreEmptyContextAndExtra();
$log->pushHandler($stackHandler);

$loader = new Loader(new Client(), new FilePathBuilder(), $log);

$command = new Command(null, $loader);
$application->add($command);
$application->setDefaultCommand($command->getName(), true);
$application->setDefinition(
    new InputDefinition([
        new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),
        new InputOption(
            '--version',
            '-V',
            InputOption::VALUE_NONE,
            'Display this application version'
        )
    ])
);

echo 'Step 3'.PHP_EOL;
$application->run();

echo 'Step 4'.PHP_EOL;
echo file_get_contents(__DIR__.'/page-loader.log').PHP_EOL;
echo 'Done'.PHP_EOL;